// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AbsenceMethod {
  FACE
  BUTTON
}

enum DeductionType {
  PERCENTAGE
  NOMINAL
}

enum GBookType {
  PERSONAL
  GROUP
}

enum GBookStatus {
  WILLCOME
  ALREADYCOME
}

enum PermitStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AbsenceStatus {
  HADIR
  CUTI
  SAKIT
  PERDIN
  LEMBUR
}

enum PermitAbsenceStatus {
  TERLAMBAT
  PULANGCEPAT
  CUTI
  SAKIT
  PERDIN
  LEMBUR
}

model AppsConfig {
  id                 String @id @default(uuid())
  lateDeduction      Int    @default(10000)
  fastLeaveDeduction Int    @default(0)
  alphaDeduction     Int    @default(0)
  shiftStart         Int    @default(8)
  shiftEnd           Int    @default(17)
  tolerance          Int    @default(5)
  lastAbsence        Int    @default(17)
  meterTolerance     Int?   @default(0)
  lat                String @default("0")
  long               String @default("0")

  updatedAt DateTime @default(now())
}

model Roles {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text
  permissions String  @db.Text

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Users     Users[]
}

model Positions {
  id            String        @id @default(uuid())
  name          String
  description   String?       @db.Text
  allowance     Float         @default(0)
  allowanceType DeductionType @default(NOMINAL)

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Users     Users[]
}

model Users {
  id              String        @id @default(uuid())
  name            String
  username        String        @unique
  password        String
  email           String
  phone           String
  nip             String
  absenceMethod   AbsenceMethod @default(BUTTON)
  face            String?       @db.Text
  principalSalary Int           @default(0)
  statusPTKP      String        @default("TK")

  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  Absence     Absence[]
  Roles       Roles        @relation(fields: [rolesId], references: [id])
  rolesId     String
  Positions   Positions    @relation(fields: [positionsId], references: [id])
  positionsId String
  Approver    PermitApps[] @relation("Approver")
  Requester   PermitApps[] @relation("Requester")
  Logs        Logs[]
}

model GuestBook {
  id            String      @id @default(uuid())
  title         String
  recipientName String?
  description   String?     @db.Text
  type          GBookType
  status        GBookStatus
  checkIn       DateTime

  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  Participant Participant[]
}

model Participant {
  id          String @id @default(uuid())
  name        String
  phone       String
  description String

  isActive    Boolean   @default(true)
  GuestBook   GuestBook @relation(fields: [guestBookId], references: [id])
  guestBookId String
}

model AllowanceList {
  id            String        @id @default(uuid())
  name          String
  allowance     Int
  allowanceType DeductionType @default(NOMINAL)

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model DeductionList {
  id            String        @id @default(uuid())
  name          String
  deduction     Int
  deductionType DeductionType @default(NOMINAL)

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Absence {
  id                 String        @id @default(uuid())
  absenceMethod      AbsenceMethod
  checkOut           DateTime? // jam pulang
  geoIn              String
  geoOut             String?
  absenceStatus      AbsenceStatus @default(HADIR)
  description        String?
  lateDeduction      Int           @default(0)
  fastLeaveDeduction Int           @default(0)
  perdinAllowance    Int           @default(0)
  lemburAllowance    Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Users     Users    @relation(fields: [usersId], references: [id])
  usersId   String
}

model Insentif {
  id           String        @id @default(uuid())
  name         String
  insentif     Int
  insentifType DeductionType @default(NOMINAL)

  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  PermitApps PermitApps[]
}

model PermitApps {
  id            String               @id @default(uuid())
  absenceStatus PermitAbsenceStatus?
  description   String?              @db.Text
  files         String?
  status        PermitStatus         @default(PENDING)
  nominal       Int                  @default(0)
  startDate     DateTime?
  endDate       DateTime?

  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Approver    Users?    @relation("Approver", fields: [approverId], references: [id])
  approverId  String?
  Requester   Users     @relation("Requester", fields: [requesterId], references: [id])
  requesterId String
  Insentif    Insentif? @relation(fields: [insentifId], references: [id])
  insentifId  String?
}

model Logs {
  id        String   @id @default(uuid())
  action    String
  model     String
  geo       String?
  createdAt DateTime @default(now())
  Users     Users?   @relation(fields: [usersId], references: [id])
  usersId   String?
}
